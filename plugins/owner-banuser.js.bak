let handler = async (m, { conn, text, args, usedPrefix, command }) => {
    if (!args[0]) 
        return m.reply(`✳️ Benutze: 
${usedPrefix + command} [group] @user <Dauer> <Grund>
${usedPrefix + command} unban [group] @user

Beispiele:
${usedPrefix + command} @user 1d Spam
${usedPrefix + command} group @user Spam
${usedPrefix + command} unban @user
${usedPrefix + command} unban group @user`);

    const isUnban = command.toLowerCase() === 'unban';
    const isGroupScope = args[0].toLowerCase() === 'group';
    let argIndex = isGroupScope ? 1 : 0;

    // Determine action: ban or unban
    if (isUnban) {
        // unban logic
        if (args[argIndex] === 'group') {
            // unban group @user
            if (!m.isGroup) return m.reply('❌ Dieser Befehl kann nur in Gruppen verwendet werden.');
            argIndex++;
            if (!args[argIndex]) return m.reply(`✳️ Bitte gib einen Benutzer an, z.B. ${usedPrefix}unban group @user`);
            const mention = m.mentionedJid[0] || (m.quoted ? m.quoted.sender : null) || (args[argIndex].replace(/[^0-9]/g, '') + '@s.whatsapp.net');
            if (!mention) return m.reply('✳️ Bitte gib einen gültigen Benutzer an.');

            if (!global.db.data.chats[m.chat]) global.db.data.chats[m.chat] = {};
            if (!global.db.data.chats[m.chat].memgc) global.db.data.chats[m.chat].memgc = {};
            if (!global.db.data.chats[m.chat].memgc[mention]) 
                return m.reply('❌ Dieser Benutzer ist in dieser Gruppe nicht gebannt.');

            global.db.data.chats[m.chat].memgc[mention].banned = false;
            global.db.data.chats[m.chat].memgc[mention].bannedTime = 0;
            await m.reply(`✅ Benutzer @${mention.split('@')[0]} wurde in dieser Gruppe entbannt.`, null, { mentions: [mention] });
            return;
        } else {
            // unban global @user
            if (!args[argIndex]) return m.reply(`✳️ Bitte gib einen Benutzer an, z.B. ${usedPrefix}unban @user`);
            const mention = m.mentionedJid[0] || (m.quoted ? m.quoted.sender : null) || (args[argIndex].replace(/[^0-9]/g, '') + '@s.whatsapp.net');
            if (!mention) return m.reply('✳️ Bitte gib einen gültigen Benutzer an.');

            if (!global.db.data.users[mention] || !global.db.data.users[mention].banned)
                return m.reply('❌ Dieser Benutzer ist nicht global gebannt.');

            global.db.data.users[mention].banned = false;
            global.db.data.users[mention].bannedTime = 0;

            // Also unban in all groups (optional)
            for (let chatId in global.db.data.chats) {
                const chat = global.db.data.chats[chatId];
                if (chat.memgc && chat.memgc[mention]) {
                    chat.memgc[mention].banned = false;
                    chat.memgc[mention].bannedTime = 0;
                }
            }

            await m.reply(`✅ Benutzer @${mention.split('@')[0]} wurde global entbannt.`, null, { mentions: [mention] });
            return;
        }
    }

    // From here, handle ban commands

    let banScope = isGroupScope ? 'group' : 'global';
    let userArgIndex = argIndex;
    if (!args[userArgIndex]) return m.reply(`✳️ Bitte gib einen Benutzer an, z.B. ${usedPrefix}ban${isGroupScope ? ' group' : ''} @user`);
    const mention = m.mentionedJid[0] || (m.quoted ? m.quoted.sender : null) || (args[userArgIndex].replace(/[^0-9]/g, '') + '@s.whatsapp.net');
    if (!mention) return m.reply('✳️ Bitte gib einen gültigen Benutzer an.');

    // Prevent banning the bot owner
    const isOwner = (global.owner || []).some(ownerNum => {
        const ownerJid = ownerNum.replace(/[^0-9]/g, '') + '@s.whatsapp.net';
        return mention === ownerJid;
    });
    if (isOwner) return m.reply('❌ Du kannst den Bot-Besitzer nicht bannen.');

    // Parse duration & reason only for global ban (group ban is usually permanent or without duration)
    let duration = 0;
    let banType = 'permanent';
    let reason = 'Kein Grund angegeben';

    if (banScope === 'global') {
        const durationArg = args[userArgIndex + 1] ? args[userArgIndex + 1].toLowerCase() : '';
        if (durationArg) {
            if (durationArg.endsWith('h')) {
                banType = 'temporary';
                const hours = parseInt(durationArg);
                if (!isNaN(hours)) duration = hours * 60 * 60 * 1000;
            } else if (durationArg.endsWith('d')) {
                banType = 'temporary';
                const days = parseInt(durationArg);
                if (!isNaN(days)) duration = days * 24 * 60 * 60 * 1000;
            } else if (['permanent', 'perm'].includes(durationArg)) {
                banType = 'permanent';
                duration = 0;
            }
        }
        reason = args.slice(durationArg ? userArgIndex + 2 : userArgIndex + 1).join(' ') || reason;
    } else {
        // group ban: reason starts right after user arg
        reason = args.slice(userArgIndex + 1).join(' ') || reason;
    }

    if (banScope === 'global') {
        // Global ban logic
        if (!global.db.data.users[mention]) {
            global.db.data.users[mention] = { banned: false, bannedTime: 0 };
        }
        const user = global.db.data.users[mention];
        user.banned = true;

        if (banType === 'temporary' && duration > 0) {
            user.bannedTime = Date.now() + duration;

            // Send ban message
            const hours = Math.floor(duration / (60 * 60 * 1000));
            const days = Math.floor(hours / 24);
            const remainingHours = hours % 24;
            let durationText = '';
            if (days > 0) durationText += `${days} Tag${days > 1 ? 'e' : ''}`;
            if (remainingHours > 0) durationText += (durationText ? ' und ' : '') + `${remainingHours} Stunde${remainingHours > 1 ? 'n' : ''}`;

            await m.reply(`✅ *Temporärer globaler Ban*\n\n• *Benutzer:* @${mention.split('@')[0]}\n• *Dauer:* ${durationText}\n• *Grund:* ${reason}`, null, { mentions: [mention] });
            await conn.sendMessage(mention, { text: `⚠️ *Du wurdest temporär gebannt*\n\n• *Dauer:* ${durationText}\n• *Grund:* ${reason}\n\nDu kannst keine Bot-Befehle verwenden, bis der Ban aufgehoben wird.` });

            // Auto unban timer
            setTimeout(async () => {
                if (global.db.data.users[mention] && global.db.data.users[mention].bannedTime <= Date.now()) {
                    global.db.data.users[mention].banned = false;
                    global.db.data.users[mention].bannedTime = 0;

                    await conn.sendMessage(mention, { text: `✅ Dein temporärer Ban wurde aufgehoben. Du kannst nun wieder Bot-Befehle verwenden.` });
                }
            }, duration);
        } else {
            // Permanent ban
            user.bannedTime = 0;
            await m.reply(`✅ *Permanenter globaler Ban*\n\n• *Benutzer:* @${mention.split('@')[0]}\n• *Grund:* ${reason}`, null, { mentions: [mention] });
            await conn.sendMessage(mention, { text: `⚠️ *Du wurdest permanent gebannt*\n\n• *Grund:* ${reason}\n\nDu kannst keine Bot-Befehle mehr verwenden, bis ein Administrator den Ban aufhebt.` });
        }
    } else {
        // Group ban logic
        if (!m.isGroup) return m.reply('❌ Dieser Befehl kann nur in Gruppen verwendet werden.');
        if (!global.db.data.chats[m.chat]) global.db.data.chats[m.chat] = {};
        if (!global.db.data.chats[m.chat].memgc) global.db.data.chats[m.chat].memgc = {};

        global.db.data.chats[m.chat].memgc[mention] = global.db.data.chats[m.chat].memgc[mention] || {};
        global.db.data.chats[m.chat].memgc[mention].banned = true;
        global.db.data.chats[m.chat].memgc[mention].bannedTime = 0;
        global.db.data.chats[m.chat].memgc[mention].warn = global.db.data.chats[m.chat].memgc[mention].warn || 0;

        await m.reply(`✅ *Gruppenban*\n\n• *Benutzer:* @${mention.split('@')[0]}\n• *Grund:* ${reason}`, null, { mentions: [mention] });
        await conn.sendMessage(mention, { text: `⚠️ *Du wurdest in dieser Gruppe gebannt*\n\n• *Grund:* ${reason}\n\nDu kannst keine Bot-Befehle in dieser Gruppe verwenden, bis der Ban aufgehoben wird.` });
    }

    console.log(`Ban command executed - User: ${mention}, Scope: ${banScope}, Type: ${banType}, Duration: ${duration}, Reason: ${reason}`);
};

handler.help = ['ban [group] @user <Dauer> <Grund>', 'unban [group] @user'];
handler.tags = ['owner'];
handler.command = /^(ban|b|unban)$/i;
handler.owner = true;

module.exports = handler;
