let handler = async (m, { conn, command, args, usedPrefix }) => {
    let type = (args[0] || '').toLowerCase()
    let users = global.db.data.users[m.sender]
    let time = users.lastkerja + 300000
    let __timers = (new Date - users.lastkerja)
    let _timers = (0 - __timers)
    let timers = clockString(_timers)
    let penumpan = ['Herr', 'Dame', 'Student', 'Sch√ºler', '√§ltere Dame']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
    let daganga = ['Karotten', 'Kohl', 'Salat', 'Tomaten', 'Sellerie', 'Chili', 'Fleisch', 'Fisch', 'H√ºhnchen']
    let dagangan = daganga[Math.floor(Math.random() * daganga.length)]
    let pasie = ['Kopfschmerzen', 'Verletzung', 'Verbrennung', 'Knochenbruch']
    let pasien = pasie[Math.floor(Math.random() * pasie.length)]
    let pane = ['Karotten', 'Kohl', 'Erdbeeren', 'Tee', 'Reis', 'Orangen', 'Bananen', 'Wassermelonen', 'Durian', 'Rambutan']
    let panen = pane[Math.floor(Math.random() * pane.length)]
    let bengke = ['Auto', 'Motorrad', 'Rikscha', 'Taxi', 'Bus', 'Kleinbus', 'Dreirad', 'Fahrrad']
    let bengkel = bengke[Math.floor(Math.random() * bengke.length)]
    let ruma = ['Haus bauen', 'Geb√§ude bauen', 'Haus reparieren', 'Geb√§ude reparieren', '√ñffentliche Einrichtung bauen', '√ñffentliche Einrichtung reparieren']
    let rumah = ruma[Math.floor(Math.random() * ruma.length)]
    let pnjh = ['Dieb', 'Verkehrss√ºnder', 'Bankr√§uber', 'Taschendieb', 'Korruptionsverd√§chtiger']
    let pnjht = pnjh[Math.floor(Math.random() * pnjh.length)]
    
    if (/kerjadulu|arbeiten|work|arbeit/i.test(command)) {
        switch (type) {
            case 'ojek':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr ${clockString(time - new Date())}`)
                let hasilojek = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast *${penumpang}* transportiert üöó\nUnd erh√§ltst daf√ºr *${hasilojek} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasilojek
                    users.lastkerja = new Date * 1
                })
                break
            case 'pedagang':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr\nüïú ${clockString(time - new Date())}`)
                let hasildagang = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast Kunden gewonnen, die *${dagangan}* kaufen üõí\nUnd erh√§ltst daf√ºr *${hasildagang} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasildagang
                    users.lastkerja = new Date * 1
                })
                break
            case 'dokter':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr\nüïú ${clockString(time - new Date())}`)
                let hasildokter = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast einen Patienten mit *${pasien}* geheilt üíâ\nUnd erh√§ltst daf√ºr *${hasildokter} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasildokter
                    users.lastkerja = new Date * 1
                })
                break
            case 'petani':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr\nüïú ${clockString(time - new Date())}`)
                let hasiltani = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast *${panen}* geerntet! üåΩ Und verkauft üß∫\nUnd erh√§ltst daf√ºr *${hasiltani} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasiltani
                    users.lastkerja = new Date * 1
                })
                break
            case 'montir':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr\nüïú ${clockString(time - new Date())}`)
                let hasilmontir = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast einen Kunden bedient und ein *${bengkel} üîß* repariert\nUnd erh√§ltst daf√ºr *${hasilmontir} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasilmontir
                    users.lastkerja = new Date * 1
                })
                break
            case 'kuli':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr\nüïú ${clockString(time - new Date())}`)
                let hasilkuli = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast gerade ${rumah} fertiggestellt üî®\nUnd erh√§ltst daf√ºr *${hasilkuli} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasilkuli
                    users.lastkerja = new Date * 1
                })
                break
            case 'polisi':
                if (new Date - users.lastkerja < 300000) return m.reply(`Du arbeitest bereits\nZeit f√ºr eine Pause f√ºr\nüïú ${clockString(time - new Date())}`)
                let hasilpolis = Math.floor(Math.random() * 5000000)
                m.reply(`Du hast gerade einen ${pnjht} verhaftet üö®\nUnd erh√§ltst daf√ºr *${hasilpolis} M√ºnzen*`).then(() => {
                    users.M√ºnzen += hasilpolis
                    users.lastkerja = new Date * 1
                })
                break
            default:
                //return m.reply(`_*W√§hle einen Beruf, den du aus√ºben m√∂chtest*_\n\n_‚Ä¢ Bauarbeiter_ \n_‚Ä¢ Mechaniker_ \n_‚Ä¢ Bauer_ \n_‚Ä¢ Arzt_ \n_‚Ä¢ H√§ndler_ \n_‚Ä¢ Fahrer_ \n\nBeispiel zur Verwendung:\n${usedPrefix}arbeiten Bauarbeiter`)
let judul = `
_*W√§hle einen Beruf, den du aus√ºben m√∂chtest*_

- Arzt [üë®‚Äç‚öï]
- H√§ndler [üë®üèª‚Äçüç≥]
- Fahrer [üõµ] 
- Bauarbeiter [üë∑‚Äç‚ôÇÔ∏è]
- Mechaniker [üë®‚Äçüîß]
- Bauer [üë®‚Äçüåæ]
- Polizist [üëÆ]
`
                let msg = {
                viewOnceMessage: {
                        message: {
                                messageContextInfo: {
                                        deviceListMetadata: {},
                                        deviceListMetadataVersion: 2,
                                },
                                interactiveMessage: {
                                        body: {
                                                text: judul,
                                        },
                                        footer: {
                                                text: `by Killua Fourteen`,
                                        },
                                        header: {
                                                title: '',
                                                subtitle: '',
                                                hasMediaAttachment: false
                                        },
                                        nativeFlowMessage: {
                                                buttons: [
                                                        {
              "name": "single_select",
              "buttonParamsJson":
JSON.stringify({
 "title": "W√§hle einen Beruf",
"sections": [
      {
        title: 'Berufsliste',
        highlight_label: 'Ausw√§hlen', /*personal*/
        rows: [
          { "header": "", "title": 'Arzt [üë®‚Äç‚öï]', "description": "Als Arzt arbeiten", "id": `.arbeiten dokter` },
          { "header": "", "title": 'H√§ndler [üë®üèª‚Äçüç≥]', "description": "Als H√§ndler arbeiten", "id": `.arbeiten pedagang` },
          { "header": "", "title": 'Fahrer [üõµ]', "description": "Als Fahrer arbeiten", "id": `.arbeiten ojek` },
          { "header": "", "title": 'Bauarbeiter [üë∑‚Äç‚ôÇÔ∏è]', "description": "Als Bauarbeiter arbeiten", "id": `.arbeiten kuli` },
          { "header": "", "title": 'Mechaniker [üë®‚Äçüîß]', "description": "Als Mechaniker arbeiten", "id": `.arbeiten montir` },
          { "header": "", "title": 'Bauer [üë®‚Äçüåæ]', "description": "Als Bauer arbeiten", "id": `.arbeiten petani` },
          { "header": "", "title": 'Polizist [üëÆ]', "description": "Als Polizist arbeiten", "id": `.arbeiten polisi` },
        ]
      }
    ]
              })              
            } 
                                                ],
                                        },
                                        contextInfo: {
                                                quotedMessage: m.message,
                                                participant: m.sender,
                                                ...m.key
                                        },
                                    
                                },
                        },
                },
        };
         return conn.relayMessage(m.chat,¬†msg,¬†{¬†});
        }
    }
}
handler.help = ['arbeiten', 'arbeit', 'work']
handler.tags = ['rpg']
handler.command = /^(arbeiten|arbeit|work)$/i

handler.register = true
handler.group = true
handler.rpg = true

module.exports = handler

function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}